// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StianProsjektAPI.Data;

#nullable disable

namespace StianProsjektAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231204134839_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StianProsjektAPI.Models.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BlogDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BlogName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isOpenForExternalWriters")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BlogId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Blog", (string)null);

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            BlogDescription = "This is my blog. I write about stuff I like.",
                            BlogName = "Stian's Blog",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3638),
                            isOpenForExternalWriters = true
                        },
                        new
                        {
                            BlogId = 2,
                            BlogDescription = "This is my second blog. I write about stuff I like.",
                            BlogName = "Stian's Blog 2",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3730),
                            isOpenForExternalWriters = true
                        },
                        new
                        {
                            BlogId = 3,
                            BlogDescription = "This is my third blog. I write about stuff I like.",
                            BlogName = "Stian's Blog 3",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3732),
                            isOpenForExternalWriters = true
                        });
                });

            modelBuilder.Entity("StianProsjektAPI.Models.Entities.BlogPost", b =>
                {
                    b.Property<int>("BlogPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("BlogPostContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BlogPostTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isOpenForExternalWriters")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BlogPostId");

                    b.HasIndex("BlogId");

                    b.HasIndex("OwnerId");

                    b.ToTable("BlogPost", (string)null);

                    b.HasData(
                        new
                        {
                            BlogPostId = 1,
                            BlogId = 1,
                            BlogPostContent = "This is my first blogpost. I write about stuff I like.",
                            BlogPostTitle = "BlogPost 1",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3848),
                            isOpenForExternalWriters = false
                        },
                        new
                        {
                            BlogPostId = 2,
                            BlogId = 1,
                            BlogPostContent = "This is my second blogpost. I write about stuff I like.",
                            BlogPostTitle = "BlogPost 2",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3850),
                            isOpenForExternalWriters = false
                        },
                        new
                        {
                            BlogPostId = 3,
                            BlogId = 1,
                            BlogPostContent = "This is my third blogpost. I write about stuff I like.",
                            BlogPostTitle = "BlogPost 3",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3851),
                            isOpenForExternalWriters = false
                        },
                        new
                        {
                            BlogPostId = 4,
                            BlogId = 2,
                            BlogPostContent = "This is my fourth blogpost. I write about stuff I like.",
                            BlogPostTitle = "BlogPost 4",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3852),
                            isOpenForExternalWriters = false
                        },
                        new
                        {
                            BlogPostId = 5,
                            BlogId = 2,
                            BlogPostContent = "This is my fifth blogpost. I write about stuff I like.",
                            BlogPostTitle = "BlogPost 5",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3854),
                            isOpenForExternalWriters = false
                        },
                        new
                        {
                            BlogPostId = 6,
                            BlogId = 2,
                            BlogPostContent = "This is my sixth blogpost. I write about stuff I like.",
                            BlogPostTitle = "BlogPost 6",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3855),
                            isOpenForExternalWriters = false
                        },
                        new
                        {
                            BlogPostId = 7,
                            BlogId = 3,
                            BlogPostContent = "This is my seventh blogpost. I write about stuff I like.",
                            BlogPostTitle = "BlogPost 7",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3856),
                            isOpenForExternalWriters = false
                        },
                        new
                        {
                            BlogPostId = 8,
                            BlogId = 3,
                            BlogPostContent = "This is my eighth blogpost. I write about stuff I like.",
                            BlogPostTitle = "BlogPost 8",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3858),
                            isOpenForExternalWriters = false
                        },
                        new
                        {
                            BlogPostId = 9,
                            BlogId = 3,
                            BlogPostContent = "This is my ninth blogpost. I write about stuff I like.",
                            BlogPostTitle = "BlogPost 9",
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3859),
                            isOpenForExternalWriters = false
                        });
                });

            modelBuilder.Entity("StianProsjektAPI.Models.Entities.BlogPostComment", b =>
                {
                    b.Property<int>("BlogPostCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BlogPostCommentContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("BlogPostId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BlogPostCommentId");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("OwnerId");

                    b.ToTable("BlogPostComment", (string)null);

                    b.HasData(
                        new
                        {
                            BlogPostCommentId = 1,
                            BlogPostCommentContent = "This is my first comment. I write about stuff I like.",
                            BlogPostId = 1,
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3869)
                        },
                        new
                        {
                            BlogPostCommentId = 2,
                            BlogPostCommentContent = "This is my second comment. I write about stuff I like.",
                            BlogPostId = 1,
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3871)
                        },
                        new
                        {
                            BlogPostCommentId = 3,
                            BlogPostCommentContent = "This is my third comment. I write about stuff I like.",
                            BlogPostId = 1,
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3872)
                        },
                        new
                        {
                            BlogPostCommentId = 4,
                            BlogPostCommentContent = "This is my fourth comment. I write about stuff I like.",
                            BlogPostId = 2,
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3873)
                        },
                        new
                        {
                            BlogPostCommentId = 5,
                            BlogPostCommentContent = "This is my fifth comment. I write about stuff I like.",
                            BlogPostId = 2,
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3874)
                        },
                        new
                        {
                            BlogPostCommentId = 6,
                            BlogPostCommentContent = "This is my sixth comment. I write about stuff I like.",
                            BlogPostId = 2,
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3875)
                        },
                        new
                        {
                            BlogPostCommentId = 7,
                            BlogPostCommentContent = "This is my seventh comment. I write about stuff I like.",
                            BlogPostId = 3,
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3876)
                        },
                        new
                        {
                            BlogPostCommentId = 8,
                            BlogPostCommentContent = "This is my eighth comment. I write about stuff I like.",
                            BlogPostId = 3,
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3878)
                        },
                        new
                        {
                            BlogPostCommentId = 9,
                            BlogPostCommentContent = "This is my ninth comment. I write about stuff I like.",
                            BlogPostId = 3,
                            TimeCreated = new DateTime(2023, 12, 4, 14, 48, 39, 435, DateTimeKind.Local).AddTicks(3879)
                        });
                });

            modelBuilder.Entity("StianProsjektAPI.Models.Entities.BlogPostTag", b =>
                {
                    b.Property<int>("BlogPostTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlogPostId")
                        .HasColumnType("int");

                    b.Property<string>("BlogPostTagName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BlogPostTagId");

                    b.HasIndex("BlogPostId");

                    b.ToTable("BlogPostTag", (string)null);

                    b.HasData(
                        new
                        {
                            BlogPostTagId = 1,
                            BlogPostId = 1,
                            BlogPostTagName = "Tag1"
                        },
                        new
                        {
                            BlogPostTagId = 2,
                            BlogPostId = 1,
                            BlogPostTagName = "Tag2"
                        },
                        new
                        {
                            BlogPostTagId = 3,
                            BlogPostId = 1,
                            BlogPostTagName = "Tag3"
                        },
                        new
                        {
                            BlogPostTagId = 4,
                            BlogPostId = 2,
                            BlogPostTagName = "Tag4"
                        },
                        new
                        {
                            BlogPostTagId = 5,
                            BlogPostId = 2,
                            BlogPostTagName = "Tag5"
                        },
                        new
                        {
                            BlogPostTagId = 6,
                            BlogPostId = 2,
                            BlogPostTagName = "Tag6"
                        },
                        new
                        {
                            BlogPostTagId = 7,
                            BlogPostId = 3,
                            BlogPostTagName = "Tag7"
                        },
                        new
                        {
                            BlogPostTagId = 8,
                            BlogPostId = 3,
                            BlogPostTagName = "Tag8"
                        },
                        new
                        {
                            BlogPostTagId = 9,
                            BlogPostId = 3,
                            BlogPostTagName = "Tag9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StianProsjektAPI.Models.Entities.Blog", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("StianProsjektAPI.Models.Entities.BlogPost", b =>
                {
                    b.HasOne("StianProsjektAPI.Models.Entities.Blog", "Blog")
                        .WithMany("BlogPosts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Blog");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("StianProsjektAPI.Models.Entities.BlogPostComment", b =>
                {
                    b.HasOne("StianProsjektAPI.Models.Entities.BlogPost", "BlogPost")
                        .WithMany("BlogPostComments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("BlogPost");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("StianProsjektAPI.Models.Entities.BlogPostTag", b =>
                {
                    b.HasOne("StianProsjektAPI.Models.Entities.BlogPost", "BlogPost")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("StianProsjektAPI.Models.Entities.Blog", b =>
                {
                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("StianProsjektAPI.Models.Entities.BlogPost", b =>
                {
                    b.Navigation("BlogPostComments");

                    b.Navigation("BlogPostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
